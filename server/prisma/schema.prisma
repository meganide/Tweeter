// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id         String      @id @default(uuid())
  name       String      @unique
  email      String      @unique
  password   String?
  profilePic String?     @default("https://variety.com/wp-content/uploads/2022/11/Screen-Shot-2022-11-02-at-8.33.52-AM.png?w=681&h=383&crop=1")
  provider   String      @default("local")
  createdAt  DateTime    @default(now())
  role       Role        @default(USER)
  posts      Post[]
  profile    Profile?
  comments   Comment[]
  likes      Like[]
  following  Followers[] @relation("FollowerUser")
  followers  Followers[] @relation("FollowedUser")
  retweets   Retweet[]
  saves      Save[]
}

model Followers {
  id         String @id @default(uuid())
  follower   User   @relation(name: "FollowerUser", fields: [followerId], references: [id])
  followerId String
  followed   User   @relation(name: "FollowedUser", fields: [followedId], references: [id])
  followedId String

  @@unique([followerId, followedId])
}

model Profile {
  id            String  @id @default(uuid())
  bio           String? @default("No bio assigned yet...")
  backgroundImg String? @default("http://wallpaperset.com/w/full/9/3/b/224224.jpg")
  user          User    @relation(fields: [userId], references: [id])
  userId        String  @unique
}

model Comment {
  id        String   @id @default(uuid())
  comment   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  likes     Like[]
}

model Like {
  id        String   @id @default(uuid())
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  likedBy   User     @relation(fields: [userId], references: [id])
  userId    String

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Retweet {
  id          String @id @default(uuid())
  post        Post   @relation(fields: [postId], references: [id])
  postId      String
  retweetedBy User   @relation(fields: [userId], references: [id])
  userId      String

  @@unique([userId, postId])
}

model Save {
  id      String @id @default(uuid())
  post    Post   @relation(fields: [postId], references: [id])
  postId  String
  savedBy User   @relation(fields: [userId], references: [id])
  userId  String

  @@unique([userId, postId])
}

model Post {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   String?
  image     String?
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  likes     Like[]
  retweets  Retweet[]
  saves     Save[]
}
